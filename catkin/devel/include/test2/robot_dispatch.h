// Generated by gencpp from file test2/robot_dispatch.msg
// DO NOT EDIT!


#ifndef TEST2_MESSAGE_ROBOT_DISPATCH_H
#define TEST2_MESSAGE_ROBOT_DISPATCH_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace test2
{
template <class ContainerAllocator>
struct robot_dispatch_
{
  typedef robot_dispatch_<ContainerAllocator> Type;

  robot_dispatch_()
    : Instruct(0)
    , PausePosition(0)  {
    }
  robot_dispatch_(const ContainerAllocator& _alloc)
    : Instruct(0)
    , PausePosition(0)  {
  (void)_alloc;
    }



   typedef uint16_t _Instruct_type;
  _Instruct_type Instruct;

   typedef uint16_t _PausePosition_type;
  _PausePosition_type PausePosition;




  typedef boost::shared_ptr< ::test2::robot_dispatch_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::test2::robot_dispatch_<ContainerAllocator> const> ConstPtr;

}; // struct robot_dispatch_

typedef ::test2::robot_dispatch_<std::allocator<void> > robot_dispatch;

typedef boost::shared_ptr< ::test2::robot_dispatch > robot_dispatchPtr;
typedef boost::shared_ptr< ::test2::robot_dispatch const> robot_dispatchConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::test2::robot_dispatch_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::test2::robot_dispatch_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace test2

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'test2': ['/home/zyvv/work/Rosprj/catkin/src/test2/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::test2::robot_dispatch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::test2::robot_dispatch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test2::robot_dispatch_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::test2::robot_dispatch_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test2::robot_dispatch_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::test2::robot_dispatch_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::test2::robot_dispatch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c35d7c7ecbf7a8c67d04da8680b52741";
  }

  static const char* value(const ::test2::robot_dispatch_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc35d7c7ecbf7a8c6ULL;
  static const uint64_t static_value2 = 0x7d04da8680b52741ULL;
};

template<class ContainerAllocator>
struct DataType< ::test2::robot_dispatch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "test2/robot_dispatch";
  }

  static const char* value(const ::test2::robot_dispatch_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::test2::robot_dispatch_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 Instruct\n\
uint16 PausePosition\n\
";
  }

  static const char* value(const ::test2::robot_dispatch_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::test2::robot_dispatch_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Instruct);
      stream.next(m.PausePosition);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct robot_dispatch_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::test2::robot_dispatch_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::test2::robot_dispatch_<ContainerAllocator>& v)
  {
    s << indent << "Instruct: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.Instruct);
    s << indent << "PausePosition: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.PausePosition);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEST2_MESSAGE_ROBOT_DISPATCH_H
